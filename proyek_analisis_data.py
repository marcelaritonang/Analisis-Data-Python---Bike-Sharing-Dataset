# -*- coding: utf-8 -*-
"""Proyek Analisis Data.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TEt3DLXaKbkvP-_zU1-lmbscXCztcBDO

# Proyek Analisis Data: Bike Data Sharing
- **Nama:** Rianco Marcellino Andreas
- **Email:** marcelaritonang1303@gmail.com
- **ID Dicoding:** riancomarcellino13

## Menentukan Pertanyaan Bisnis

- Bagaimana tren penggunaan sepeda berubah selama musim-musim tertentu?
- Apakah ada perbedaan signifikan dalam pola penggunaan sepeda antara hari kerja dan akhir pekan?
- Bagaimana penggunaan sepeda dipengaruhi oleh kondisi cuaca?
- Apakah ada korelasi antara suhu dan jumlah pengguna sepeda?

## Import Semua Packages/Library yang Digunakan

Pertama saya akan
 Mengimpor Liblary yang akan digunakan untuk menganalasis data yang dibutuhkan
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

"""## Data Wrangling

### Gathering Data

Kode tersebut digunakan untuk memuat dua dataset yang disebut hour.csv dan day.csv. Setelah memuat dataset tersebut, kode menampilkan beberapa baris pertama dari masing-masing dataset menggunakan metode head().<br>
**Load Dataset:**,<br>
hour_data = pd.read_csv('hour.csv')<br>
day_data = pd.read_csv('day.csv')<br>
**Tampilan Dataset**
"""

# Load dataset
hour_data = pd.read_csv('hour.csv')
day_data = pd.read_csv('day.csv')
hour_data.head()
day_data.head()

"""### Assessing Data

**Detail Informasi Jam** <br>

 digunakan untuk menampilkan informasi atau metadata terkait dataset yang berisi data jam pada dataset hour_data.
"""

print("Informasi Data Jam:")
print(hour_data.info())
print(hour_data.info())

"""**Infomasi Data dari Hari**<br>
Output dari info() mencakup:

Jumlah total baris (entri) dalam dataset.<br>
- Informasi tentang setiap kolom, termasuk nama kolom, tipe data, dan jumlah<br>
- nilai yang tidak null.<br>
- Memori yang digunakan oleh dataset.<br>
"""

print("Informasi Data Hari:")
print(day_data.info())

"""**Output dari describe() mencakup:**

Count: Jumlah data yang tidak null untuk setiap kolom.
- Mean: Rata-rata nilai setiap kolom.<br>
- Std: Deviasi standar (sebaran) dari setiap kolom.<br>
- Min: Nilai minimum dari setiap kolom.
25%, 50%, dan 75%: Kuartil pertama, kedua (median), dan ketiga dari setiap kolom.<br>
- Max: Nilai maksimum dari setiap kolom.
"""

# Menampilkan statistik deskriptif untuk setiap kolom
print("Statistik Deskriptif Jam:")
print(hour_data.describe())

"""Informasi ini memberikan gambaran tentang distribusi dan variasi data dalam dataset hour_data<br>
**print("Statistik Deskriptif Jam:")**: Ini adalah perintah untuk mencetak atau menampilkan teks "Statistik Deskriptif Jam:". Ini hanya langkah tambahan untuk memberikan label atau judul pada output sehingga kita tahu bahwa informasi yang ditampilkan berkaitan dengan dataset yang berisi data jam (hour_data).

**STATISTIK DESKRITIF HARI**
"""

print("Statistik Deskriptif Hari:")
print(day_data.describe())



# Menampilkan jumlah nilai yang hilang untuk setiap kolom
print("\nJumlah Nilai Hilang Jam:")
print(hour_data.isnull().sum())

print("\nJumlah Nilai Hilang Hari:")
print(day_data.isnull().sum())

"""### Cleaning Data

**Cleaning Data**
Kode ini berfokus pada tahap pembersihan data (data cleaning) pada dataset hour_data.
<br>
Kode ini merupakan tahap pembersihan data pada dataset hour_data.

**Cek Missing Values:**

- Menampilkan jumlah nilai yang hilang pada setiap kolom.
- Menghapus baris yang memiliki nilai yang hilang.

**Cek Duplikasi:**

- Menampilkan jumlah duplikasi.
- Menghapus baris yang merupakan duplikat.
**Konversi Tipe Data:**

- Mengubah tipe data kolom 'dteday' menjadi datetime.
**Simpan Dataset Bersih:**

- Menyimpan dataset yang sudah dibersihkan ke file CSV baru ('cleaned_hour_data.csv').
"""

# Cek missing values
print("Jumlah Missing Values (Hour Data):")
print(hour_data.isnull().sum())

# Handle missing values
hour_data.dropna(inplace=True)

# Cek duplikasi
print("\nJumlah Duplikasi (Hour Data):", hour_data.duplicated().sum())

# Handle duplikasi
hour_data.drop_duplicates(inplace=True)

# Convert tipe data kolom 'dteday' ke datetime
hour_data['dteday'] = pd.to_datetime(hour_data['dteday'])

# Menyimpan dataset yang sudah dibersihkan
hour_data.to_csv('cleaned_hour_data.csv', index=False)

print("\nData Cleaning Selesai.")

"""
Kode ini merupakan langkah-langkah pembersihan data pada dataset day_data.

**Cek Missing Values:**

- Menampilkan jumlah nilai yang hilang pada setiap kolom di dataset harian (day_data).
- Menghapus baris yang memiliki nilai yang hilang.

**Cek Duplikasi:**

- Menampilkan jumlah duplikasi pada dataset harian.
- Menghapus baris yang merupakan duplikat.

**Konversi Tipe Data:**

- Mengubah tipe data kolom 'dteday' menjadi datetime.

**Simpan Dataset Bersih:**

-Menyimpan dataset yang sudah dibersihkan ke file CSV baru ('cleaned_day_data.csv').

**Pesan Program Sudah Selesai:**

Mencetak pesan "Data Cleaning Selesai."
Proses ini bertujuan untuk memastikan integritas data dan mempersiapkan dataset harian (day_data) untuk analisis lebih lanjut."""

print("\nJumlah Missing Values (Day Data):")
print(day_data.isnull().sum())

# missing values
day_data.dropna(inplace=True)

# Cek duplikasi
print("Jumlah Duplikasi (Day Data):", day_data.duplicated().sum())

# Handle duplikasi
day_data.drop_duplicates(inplace=True)

# Convert tipe data kolom 'dteday' ke datetime
day_data['dteday'] = pd.to_datetime(day_data['dteday'])

# Menyimpan dataset yang sudah dibersihkan
day_data.to_csv('cleaned_day_data.csv', index=False)

print("\nData Cleaning Selesai.")

"""## Exploratory Data Analysis (EDA)

> Pemblokiran indentasi

# **Eksplorasi Data untuk Dataset Hourly <br> Distribusi pengguna sepeda per jam**<br>
Kode ini digunakan untuk membuat histogram yang menggambarkan distribusi jumlah pengguna sepeda per jam dalam sehari pada dataset hour_data.

- plt.figure(figsize=(12, 6)): Menentukan ukuran gambar plot (12x6 inci).
sns.histplot(hour_data['hr'], bins=24, kde=False, color='skyblue'): Membuat histogram untuk kolom 'hr' (jam) dari dataset hour_data. Jumlah bins diatur menjadi 24 untuk mencerminkan jumlah jam dalam sehari. Parameter kde=False menghilangkan garis kernel density estimation, dan color='skyblue' menentukan warna plot.
- plt.title('Distribusi Pengguna Sepeda per Jam'): Menambahkan judul pada plot.
- plt.xlabel('Jam dalam Sehari'): Menambahkan label pada sumbu x, menyatakan bahwa nilai pada sumbu x mewakili jam dalam sehari.
- plt.ylabel('Jumlah Pengguna Sepeda'): Menambahkan label pada sumbu y, menyatakan bahwa nilai pada sumbu y mewakili jumlah pengguna sepeda.
- plt.show(): Menampilkan plot histogram yang telah dibuat.

### Explore ...
"""

# Eksplorasi Data untuk Dataset Hourly
# Distribusi pengguna sepeda per jam
plt.figure(figsize=(12, 6))
sns.histplot(hour_data['hr'], bins=24, kde=False, color='skyblue')
plt.title('Distribusi Pengguna Sepeda per Jam')
plt.xlabel('Jam dalam Sehari')
plt.ylabel('Jumlah Pengguna Sepeda')
plt.show()

"""# **Penggunaan sepeda berdasarkan musim** <br>
Pada Plot diibawah ini menghasilkan box plot yang memvisualisasikan distribusi penggunaan sepeda berdasarkan musim. Box plot dapat memberikan informasi tentang sebaran data, median, dan keberadaan outlier pada setiap musim, membantu dalam memahami pola atau perbedaan penggunaan sepeda antar musim.
"""

# Penggunaan sepeda berdasarkan musim
plt.figure(figsize=(10, 6))
sns.boxplot(x='season', y='cnt', data=hour_data, palette='viridis')
plt.title('Penggunaan Sepeda Berdasarkan Musim')
plt.xlabel('Musim (1: Winter, 2: Spring, 3: Summer, 4: Fall)')
plt.ylabel('Jumlah Pengguna Sepeda')
plt.show()

"""#Korelasi antara suhu dan jumlah pengguna sepeda
**Kode tersebut digunakan untuk membuat scatter plot yang menunjukkan korelasi antara suhu (dalam bentuk yang sudah dinormalisasi) dan jumlah pengguna sepeda pada dataset**

- plt.figure(figsize=(10, 6)): Menentukan ukuran gambar plot (10x6 inci).

- sns.scatterplot(x='temp', y='cnt', data=hour_data, color='coral'):

- Membuat scatter plot dengan seaborn (sns).
x='temp' menunjukkan bahwa sumbu x akan mewakili kolom 'temp' (suhu yang sudah dinormalisasi).
y='cnt' menunjukkan bahwa sumbu y akan mewakili kolom 'cnt' (jumlah pengguna sepeda).
data=hour_data adalah dataset yang digunakan.
color='coral' menentukan warna titik pada scatter plot.
- plt.title('Korelasi antara Suhu dan Jumlah Pengguna Sepeda'): Menambahkan judul pada plot.

- plt.xlabel('Suhu (Normalized)'): Menambahkan label pada sumbu x, menyatakan bahwa nilai pada sumbu x mewakili suhu yang sudah dinormalisasi.

- plt.ylabel('Jumlah Pengguna Sepeda'): Menambahkan label pada sumbu y, menyatakan bahwa nilai pada sumbu y mewakili jumlah pengguna sepeda.

- plt.show(): Menampilkan scatter plot yang telah dibuat.
"""

# Korelasi antara suhu dan jumlah pengguna sepeda
plt.figure(figsize=(10, 6))
sns.scatterplot(x='temp', y='cnt', data=hour_data, color='coral')
plt.title('Korelasi antara Suhu dan Jumlah Pengguna Sepeda')
plt.xlabel('Suhu (Normalized)')
plt.ylabel('Jumlah Pengguna Sepeda')
plt.show()

"""#Jumlah pengguna sepeda harian
Kode tersebut digunakan untuk membuat line plot yang menunjukkan tren jumlah pengguna sepeda harian pada dataset harian (day_data). <br>
Hasilnya adalah visualisasi yang menunjukkan bagaimana jumlah pengguna sepeda harian berubah sepanjang waktu. Line plot ini membantu dalam melihat tren harian dan fluktuasi jumlah pengguna sepeda dalam rentang tanggal tertentu pada dataset harian.
"""

# Eksplorasi Data untuk Dataset Daily
# Jumlah pengguna sepeda harian
plt.figure(figsize=(12, 6))
sns.lineplot(x='dteday', y='cnt', data=day_data, color='orange')
plt.title('Jumlah Pengguna Sepeda Harian')
plt.xlabel('Tanggal')
plt.ylabel('Jumlah Pengguna Sepeda')
plt.xticks(rotation=45)
plt.show()

"""# Hubungan antara suhu dan jumlah pengguna sepeda harian
Hasilnya adalah scatter plot yang menciptakan hubungan visual antara suhu yang sudah dinormalisasi dan jumlah pengguna sepeda harian. Scatter plot dapat membantu untuk memahami apakah terdapat korelasi atau pola tertentu antara variabel suhu dan jumlah pengguna sepeda. Jika titik-titik pada plot cenderung membentuk pola atau garis tren, ini dapat menunjukkan adanya korelasi positif atau negatif antara kedua variabel tersebut.
"""

# Hubungan antara suhu dan jumlah pengguna sepeda harian
plt.figure(figsize=(10, 6))
sns.scatterplot(x='temp', y='cnt', data=day_data, color='green')
plt.title('Hubungan antara Suhu dan Jumlah Pengguna Sepeda Harian')
plt.xlabel('Suhu (Normalized)')
plt.ylabel('Jumlah Pengguna Sepeda')
plt.show()

"""- plt.figure(figsize=(10, 6)): Menentukan ukuran gambar plot (10x6 inci).

- sns.scatterplot(x='temp', y='cnt', data=day_data, color='green'):

- Membuat scatter plot dengan seaborn (sns).
x='temp' menunjukkan bahwa sumbu x akan mewakili kolom 'temp' (suhu yang sudah dinormalisasi).
y='cnt' menunjukkan bahwa sumbu y akan mewakili kolom 'cnt' (jumlah pengguna sepeda).
data=day_data adalah dataset yang digunakan.
color='green' menentukan warna titik pada scatter plot.
- plt.title('Hubungan antara Suhu dan Jumlah Pengguna Sepeda Harian'): Menambahkan judul pada plot.

- plt.xlabel('Suhu (Normalized)'): Menambahkan label pada sumbu x, menyatakan bahwa nilai pada sumbu x mewakili suhu yang sudah dinormalisasi.

- plt.ylabel('Jumlah Pengguna Sepeda'): Menambahkan label pada sumbu y, menyatakan bahwa nilai pada sumbu y mewakili jumlah pengguna sepeda.

- plt.show(): Menampilkan scatter plot yang telah dibuat.

## Visualization & Explanatory Analysis

### Pertanyaan 1: Bagaimana tren penggunaan sepeda berubah selama musim-musim tertentu?
**Hasilnya adalah visualisasi yang menunjukkan tren penggunaan sepeda selama musim-musim tertentu. Penggunaan warna yang berbeda untuk setiap musim membantu memahami perubahan pola penggunaan sepeda sepanjang waktu.**
"""

# Visualisasi tren penggunaan sepeda selama musim-musim tertentu
plt.figure(figsize=(10, 6))
sns.lineplot(x='dteday', y='cnt', hue='season', data=hour_data, palette='viridis')
plt.title('Tren Penggunaan Sepeda Selama Musim-Musim Tertentu')
plt.xlabel('Tanggal')
plt.ylabel('Jumlah Pengguna Sepeda')
plt.show()

"""### Pertanyaan 2: Apakah ada perbedaan signifikan dalam pola penggunaan sepeda antara hari kerja dan akhir pekan?"""

# Visualisasi perbedaan penggunaan sepeda antara hari kerja dan akhir pekan
plt.figure(figsize=(10, 6))
sns.barplot(x='weekday', y='cnt', data=day_data, palette='Set2')
plt.title('Perbedaan Penggunaan Sepeda antara Hari Kerja dan Akhir Pekan')
plt.xlabel('Hari dalam Seminggu')
plt.ylabel('Jumlah Pengguna Sepeda')
plt.xticks(ticks=range(0, 7), labels=['Minggu', 'Senin', 'Selasa', 'Rabu', 'Kamis', 'Jumat', 'Sabtu'])
plt.show()

"""Terlihat bahwa pada akhir pekan (Sabtu dan Minggu), jumlah pengguna sepeda cenderung lebih tinggi dibandingkan dengan hari kerja.
Hari Jumat juga menunjukkan peningkatan yang signifikan, mungkin karena orang cenderung bersepeda lebih banyak menjelang akhir pekan.

# Pertanyaan 3: Analisis hubungan antara kondisi cuaca dan jumlah pengguna sepeda

Untuk menjawab pertanyaan bisnis 3, kita perlu melakukan analisis hubungan antara kondisi cuaca (weathersit) dan jumlah pengguna sepeda (cnt). Selanjutnya, kita akan membuat visualisasi untuk menunjukkan distribusi pengguna sepeda berdasarkan kondisi cuaca.


Dalam dataset ini, atribut weathersit memiliki nilai sebagai berikut:

- 1: Clear, Few clouds, Partly cloudy, Partly cloudy
- 2: Mist + Cloudy, Mist + Broken clouds, Mist + Few clouds, Mist
- 3: Light Snow, Light Rain + Thunderstorm + Scattered clouds, Light Rain + Scattered clouds
- 4: Heavy Rain + Ice Pallets + Thunderstorm + Mist, Snow + Fog
"""

hour_data['weathersit'].value_counts()
plt.figure(figsize=(10, 6))
sns.barplot(x='weathersit', y='cnt', data=hour_data, palette='coolwarm')
plt.title('Distribusi Pengguna Sepeda Berdasarkan Kondisi Cuaca')
plt.xlabel('Kondisi Cuaca')
plt.ylabel('Jumlah Pengguna Sepeda')
plt.show()

"""- Melalui value_counts(), kita dapat melihat variasi dalam kondisi cuaca (weathersit) dan seberapa sering setiap kondisi terjadi.
- Melalui bar plot, kita dapat melihat distribusi pengguna sepeda berdasarkan kondisi cuaca. Setiap batang pada plot akan mewakili jumlah pengguna sepeda dalam setiap kondisi cuaca.

**Kesimpulan:**
Dengan menganalisis hubungan antara kondisi cuaca dan jumlah pengguna sepeda, kita dapat memberikan informasi tentang seberapa besar pengaruh kondisi cuaca terhadap penggunaan sepeda. Visualisasi ini dapat membantu dalam mengevaluasi bagaimana faktor cuaca memengaruhi preferensi pengguna sepeda.

#Pertanyaan 4 : Apakah ada korelasi antara suhu dan jumlah pengguna sepeda?

**Untuk menjawab pertanyaan ini, kita dapat melakukan analisis korelasi antara suhu (atribut temp) dan jumlah pengguna sepeda (atribut cnt). Berikut adalah langkah-langkahnya:**
- Menghitung korelasi antara suhu (temp) dan jumlah pengguna sepeda (cnt).
- Membuat visualisasi untuk memperjelas hubungan korelasi tersebut.
"""

correlation_temp_cnt = hour_data['temp'].corr(hour_data['cnt'])
print(f"Korelasi antara Suhu dan Jumlah Pengguna Sepeda: {correlation_temp_cnt}")
plt.figure(figsize=(10, 6))
sns.scatterplot(x='temp', y='cnt', data=hour_data, color='coral')
plt.title('Korelasi antara Suhu dan Jumlah Pengguna Sepeda')
plt.xlabel('Suhu (Normalized)')
plt.ylabel('Jumlah Pengguna Sepeda')
plt.show()

"""**Dalam langkah-langkah di atas, kita dapat melihat seberapa kuat hubungan antara suhu dan jumlah pengguna sepeda berdasarkan nilai korelasi dan visualisasi scatter plot.
- Jika korelasi positif dan scatter plot cenderung membentuk pola naik, itu menunjukkan bahwa ketika suhu meningkat, jumlah pengguna sepeda juga cenderung meningkat.
- Sebaliknya, korelasi negatif dan pola yang cenderung turun menunjukkan hubungan sebaliknya.**

## Conclusion / Kesimpulan

- Kesimpulan Pertanyaan 1 Tren Penggunaan Sepeda Selama Musim-Musim Tertentu: <br>Terdapat perbedaan tren penggunaan sepeda selama musim-musim tertentu.
Puncak penggunaan sepeda terjadi pada musim panas dan musim gugur, sementara musim dingin memiliki penggunaan yang lebih rendah.Visualisasi menunjukkan perubahan tren penggunaan sepeda selama musim-musim tertentu.
Musim panas (season 3) dan musim gugur (season 4) menunjukkan puncak penggunaan sepeda, sementara musim dingin (season 1) memiliki tingkat penggunaan yang lebih rendah.
Pada musim panas, penggunaan sepeda mencapai puncak tertinggi, menunjukkan bahwa cuaca hangat dan kondisi yang menyenangkan mendorong orang untuk lebih sering menggunakan sepeda.
Visualisasi ini dapat menjadi dasar untuk perencanaan dan pengelolaan sumber daya sepeda selama musim-musim tertentu, memastikan ketersediaan dan pemeliharaan yang optimal pada saat puncak penggunaan.
- Kesimpulan Pertanyaan 2 Perbedaan Signifikan dalam Pola Penggunaan Sepeda Antara Hari Kerja dan Akhir Pekan:<br>Terdapat perbedaan signifikan dalam pola penggunaan sepeda antara hari kerja dan akhir pekan.
Penggunaan sepeda lebih tinggi pada hari kerja dibandingkan dengan akhir pekan.
Pola ini mungkin mencerminkan bahwa sepeda digunakan lebih sering sebagai sarana transportasi sehari-hari selama hari kerja, seperti untuk pergi bekerja atau sekolah.
Peningkatan penggunaan sepeda pada hari kerja dapat menjadi peluang untuk mendukung kebijakan transportasi berkelanjutan dan mengurangi ketergantungan pada kendaraan bermotor pada hari kerja.
Dapat dipertimbangkan untuk menyesuaikan strategi pemasaran atau penawaran layanan sepeda berbagi berdasarkan hari dalam seminggu, dengan fokus pada hari kerja untuk meningkatkan pemanfaatan sepeda.
- Kesimpulan Pertanyaan 3: Pengaruh Kondisi Cuaca terhadap Penggunaan Sepeda:<br>
Kondisi cuaca memiliki pengaruh yang signifikan terhadap penggunaan sepeda.
Distribusi pengguna sepeda menunjukkan bahwa kondisi cuaca yang lebih baik (nilai weathersit rendah) berkorelasi dengan jumlah pengguna sepeda yang lebih tinggi.
Kondisi cuaca yang cerah, dengan sedikit awan, memiliki dampak positif terhadap keputusan orang untuk menggunakan sepeda.
Pada kondisi cuaca yang kurang menguntungkan, seperti hujan atau kabut, penggunaan sepeda cenderung menurun.
Rekomendasi dapat mencakup pelaksanaan kampanye promosi atau insentif selama periode dengan kondisi cuaca yang baik untuk mendorong penggunaan sepeda lebih lanjut.
Pemantauan kondisi cuaca juga dapat digunakan untuk perencanaan dan manajemen stok sepeda, dengan fokus pada kondisi cuaca yang lebih bersahabat untuk meningkatkan ketersediaan sepeda.

- Kesimpulan Pertanyaan 4:  Kolerasi antara suhu dan pengguna sepeda:<br>Terdapat korelasi positif antara suhu dan jumlah pengguna sepeda.
Ketika suhu meningkat, jumlah pengguna sepeda cenderung meningkat, dan sebaliknya.
Korelasi positif ini menunjukkan bahwa suhu memiliki pengaruh yang signifikan terhadap keputusan orang untuk menggunakan sepeda.
Peningkatan suhu dapat dianggap sebagai faktor pendorong dalam meningkatkan aktivitas bersepeda.
Analisis ini memberikan wawasan tentang bagaimana faktor iklim, khususnya suhu, dapat digunakan untuk memprediksi atau memahami tingkat penggunaan sepeda dalam jangka waktu tertentu.
Kesimpulan ini dapat menjadi dasar untuk perencanaan strategis dalam penawaran layanan sepeda, seperti menyesuaikan operasional selama musim dengan suhu yang lebih tinggi atau merencanakan kampanye promosi yang terkait dengan perubahan suhu.
"""

pip install streamlit

!pip install pyngrok

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# import streamlit as st
# import pandas as pd
# import matplotlib.pyplot as plt
# import seaborn as sns
# 
# # Load cleaned datasets
# hour_data = pd.read_csv('cleaned_hour_data.csv')
# day_data = pd.read_csv('cleaned_day_data.csv')
# 
# # Set page title
# st.title('Proyek Analisis Data: Bike Data Sharing')
# 
# # Sidebar
# st.sidebar.header('Menu')
# selected_analysis = st.sidebar.selectbox('Pilih Analisis Data:', ('Tren Penggunaan Sepeda Selama Musim', 'Perbedaan Penggunaan Sepeda antara Hari Kerja dan Akhir Pekan', 'Pengaruh Kondisi Cuaca terhadap Penggunaan Sepeda', 'Korelasi antara Suhu dan Jumlah Pengguna Sepeda'))
# 
# # Main content based on selected analysis
# if selected_analysis == 'Tren Penggunaan Sepeda Selama Musim':
#     st.header('Tren Penggunaan Sepeda Selama Musim-Musim Tertentu')
#     plt.figure(figsize=(10, 6))
#     sns.lineplot(x='dteday', y='cnt', hue='season', data=hour_data, palette='viridis')
#     plt.title('Tren Penggunaan Sepeda Selama Musim-Musim Tertentu')
#     plt.xlabel('Tanggal')
#     plt.ylabel('Jumlah Pengguna Sepeda')
#     st.pyplot(plt)
# 
# elif selected_analysis == 'Perbedaan Penggunaan Sepeda antara Hari Kerja dan Akhir Pekan':
#     st.header('Perbedaan Penggunaan Sepeda antara Hari Kerja dan Akhir Pekan')
#     plt.figure(figsize=(10, 6))
#     sns.barplot(x='weekday', y='cnt', data=day_data, palette='Set2')
#     plt.title('Perbedaan Penggunaan Sepeda antara Hari Kerja dan Akhir Pekan')
#     plt.xlabel('Hari dalam Seminggu')
#     plt.ylabel('Jumlah Pengguna Sepeda')
#     plt.xticks(ticks=range(0, 7), labels=['Minggu', 'Senin', 'Selasa', 'Rabu', 'Kamis', 'Jumat', 'Sabtu'])
#     st.pyplot(plt)
# 
# elif selected_analysis == 'Pengaruh Kondisi Cuaca terhadap Penggunaan Sepeda':
#     st.header('Pengaruh Kondisi Cuaca terhadap Penggunaan Sepeda')
#     plt.figure(figsize=(10, 6))
#     sns.barplot(x='weathersit', y='cnt', data=hour_data, palette='coolwarm')
#     plt.title('Distribusi Pengguna Sepeda Berdasarkan Kondisi Cuaca')
#     plt.xlabel('Kondisi Cuaca')
#     plt.ylabel('Jumlah Pengguna Sepeda')
#     st.pyplot(plt)
# 
# elif selected_analysis == 'Korelasi antara Suhu dan Jumlah Pengguna Sepeda':
#     st.header('Korelasi antara Suhu dan Jumlah Pengguna Sepeda')
#     correlation_temp_cnt = hour_data['temp'].corr(hour_data['cnt'])
#     st.write(f"Korelasi antara Suhu dan Jumlah Pengguna Sepeda: {correlation_temp_cnt}")
#     plt.figure(figsize=(10, 6))
#     sns.scatterplot(x='temp', y='cnt', data=hour_data, color='coral')
#     plt.title('Korelasi antara Suhu dan Jumlah Pengguna Sepeda')
#     plt.xlabel('Suhu (Normalized)')
#     plt.ylabel('Jumlah Pengguna Sepeda')
#     st.pyplot(plt)
#

! wget -q -O - ipv4.icanhazip.com

"""- **IP DIATAS DIGUNAKAN UNTUK LINK YANG DIBAWAH - GRAFIK MUNCUL MENUNGGU WAKTU**
 - **KETIKA MENJALANKAN WEB TUNGGU BEBERAPA SAAT AGAR PROGRAM DAPAT MEMILIH DARI PILIHAN DARI GRAFIK YANG INGIN DITAMPILKAN**
 - **PROGRAM TERKADANG TIDAK SELALU RESPONSIVE JADI TUNGGU BEBERAPA SAAT AGAR SERVER MENJALANKAN SESUAI DENGAN KAPASITASNYA**

#**KETIKA MENJALANKAN WEB PILIH PADA BAGIAN *HTTPS* BUKAN HTTP**
"""

!streamlit run app.py & npx localtunnel --port 8501